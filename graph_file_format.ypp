%{

#include <stdio.h>


#define YYSTYPE char*
#define YYPARSE_PARAM output_param

#include "graph_file_format.tab.hpp"


extern int yylex(YYSTYPE *value,YYLTYPE *location);

/*
 * It seems for me that it will work only 
 * in bison parser.  
 */
#define yyerror(str) my_yyerror(&yylloc,(str))

void my_yyerror(struct YYLTYPE *locp,const char *str);

%}

/*
%union
{
	char *str;
}
*/

%error-verbose
%locations
%pure-parser

%token COMMENT_STRING;
%token GRAPH_BEGIN_TAG;
%token GRAPH_END_TAG;
%token WHITE_SPACE;
%token POSITIVE_FLOAT_POINT_VALUE;
%token VERSION_KEY_WORD;
%token MAIN_SUBGRAPH_KEY_WORD;
%token STRING_VALUE;
%token CODE_CLAUSE;

%token HEADER_KEY_WORD;
%token HEADER_BEGIN_TAG;
%token HEADER_END_TAG;

%token ROOT_KEY_WORD;
%token ROOT_BEGIN_TAG;
%token ROOT_END_TAG;

%token TAIL_KEY_WORD;
%token TAIL_BEGIN_TAG;
%token TAIL_END_TAG;

%token NAME_KEY_WORD;
%token SUBGRAPH_BEGIN_TAG;
%token SUBGRAPH_END_TAG;

%token CONDITION_KEY_WORD;

%token VERTEX_BEGIN_TAG;
%token VERTEX_END_TAG;

%token TEMPLATE_NAME_KEY_WORD;

%token CODE_BEGIN_TAG;
%token CODE_END_TAG;

%token BLOCK_BEGIN_TAG;
%token BLOCK_END_TAG;
%token FILE_KEY_WORD;

%token  IO_VOLUME_KEY_WORD;
%token  CODE_VOLUME_KEY_WORD;

%token EXCHANGE_BEGIN_TAG;
%token EXCHANGE_END_TAG;

%token SEND_BEGIN_TAG;
%token SEND_END_TAG;

%token RECV_BEGIN_TAG;
%token RECV_END_TAG;

%token FRAGMENT_BEGIN_TAG;
%token FRAGMENT_END_TAG;

%token VARIABLE_KEY_WORD;
%token TYPE_KEY_WORD;

%token LEFT_KEY_WORD;
%token RIGHT_KEY_WORD;

%token INTERNAL_EDGE_BEGIN_TAG;
%token INTERNAL_EDGE_END_TAG;

%token EXTERNAL_EDGE_BEGIN_TAG;
%token EXTERNAL_EDGE_END_TAG;



%%
graph:  comments  GRAPH_BEGIN_TAG  comments graph_declarations comments main_subgraph comments entry_graph comments GRAPH_END_TAG comments;
     ;

comments:
			| comments COMMENT_STRING
			| comments WHITE_SPACE
        ;

graph_declarations: version_clause comments header_clause comments root_clause comments tail_clause 
                  ;

header_clause:
               | HEADER_BEGIN_TAG comments HEADER_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments HEADER_END_TAG
                   {printf("File with code for header located in: \"%s\"\n",$7);  } 
               | HEADER_BEGIN_TAG comments CODE_CLAUSE comments HEADER_END_TAG { printf("Code for header: \"%s\"\n",$3); }
             ;

root_clause:   
               | ROOT_BEGIN_TAG comments ROOT_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments ROOT_END_TAG 
                  {printf("File with code for root located in: \"%s\"\n",$7);  } 
               | ROOT_BEGIN_TAG comments CODE_CLAUSE comments ROOT_END_TAG { printf("Code for root: \"%s\"\n",$3); }
             ;

tail_clause:    
               | TAIL_BEGIN_TAG comments TAIL_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments TAIL_END_TAG
                  {printf("File with code for tail located in: \"%s\"\n",$7);  } 
               | TAIL_BEGIN_TAG comments CODE_CLAUSE comments TAIL_END_TAG { printf("Code for tail: \"%s\"\n",$3); }
             ;



entry_graph: 
			| entry_graph  comments  subgraph            
           ;

version_clause: VERSION_KEY_WORD  comments '=' comments POSITIVE_FLOAT_POINT_VALUE /* {printf("OK\n\n\n\n");}*/  WHITE_SPACE { printf("%s\n",$5); double val; val=strtod($5,NULL); printf("version is %f\n",val); }
              ;

main_subgraph:  /* If Empty then the first subgraph in graph file will be choisen as main */
               | MAIN_SUBGRAPH_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE { printf("main subgraph is '%s'\n",$5); }
             ; 

subgraph: SUBGRAPH_BEGIN_TAG comments name_clause comments condition_clause comments subgraph_entry comments SUBGRAPH_END_TAG
        ;

name_clause: NAME_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
           ;

condition_clause: CONDITION_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE
                ;

subgraph_entry:
                | subgraph_entry comments vertex  
                | subgraph_entry comments internal_edge 
                | subgraph_entry comments external_edge
              ;

vertex: VERTEX_BEGIN_TAG comments name_clause comments vertex_entry VERTEX_END_TAG 
      ;

vertex_entry:   template_name_clause comments
              | vertex_body_clause
            ; 

template_name_clause: TEMPLATE_NAME_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
                           ;

vertex_body_clause:   code_volume_clause comments
                    | exchange_clause    comments
                    | code_volume_clause comments vertex_body_clause
                    | exchange_clause    comments vertex_body_clause
                  ;


code_volume_clause: CODE_BEGIN_TAG  comments code_declarations code_block_clause comments CODE_END_TAG
                  ;
code_declarations: 
                 | code_volume_weight_clause  comments code_declarations
                 | io_volume_weight_clause    comments  code_declarations
                 ;

code_block_clause: CODE_CLAUSE WHITE_SPACE
                 | FILE_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
                 ;

io_volume_weight_clause: IO_VOLUME_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE
                       ;

code_volume_weight_clause: CODE_VOLUME_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE 
                         ;

exchange_clause: EXCHANGE_BEGIN_TAG comments name_clause exchange_entry comments EXCHANGE_END_TAG
               ;

exchange_entry:
              | comments send_clause exchange_entry
              | comments recv_clause exchange_entry
              ;

send_clause: SEND_BEGIN_TAG comments edge_entry comments  SEND_END_TAG
           ;

recv_clause: RECV_BEGIN_TAG comments edge_entry comments  RECV_END_TAG
           ;


edge_entry:       template_name_clause
                | edge_variables_fragment edge_variables_fragments
                ;

edge_variables_fragments:
                        | comments edge_variables_fragment edge_variables_fragments
                        ;

edge_variables_fragment: 
                         FRAGMENT_BEGIN_TAG 
                            comments 
                            variable_name_clause 
                            comments 
                            variable_type_clause 
                            comments  
                            left_fragment_border_clause
                            comments
                            right_fragment_border_clause
                            comments
                         FRAGMENT_END_TAG;


variable_name_clause: VARIABLE_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE;

variable_type_clause: TYPE_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE;

left_fragment_border_clause:  LEFT_KEY_WORD  comments '=' comments CODE_CLAUSE WHITE_SPACE;
right_fragment_border_clause: RIGHT_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE;


edge_type_clause: TYPE_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE;



internal_edge: INTERNAL_EDGE_BEGIN_TAG comments INTERNAL_EDGE_END_TAG
             ; 

external_edge: EXTERNAL_EDGE_BEGIN_TAG comments EXTERNAL_EDGE_END_TAG
             ;



%%


void my_yyerror(struct YYLTYPE *locp,const char *err_str)
{
	printf
	(
		"\n\nError at position: %d.%d - %d.%d\n\t%s\n\n",
		locp->first_line,
		locp->first_column,
	    locp->last_line,
		locp->last_column,
		err_str
	);
}

