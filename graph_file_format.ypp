%{

#include <stdio.h>


#define YYSTYPE char*


#include "graph_file_format.tab.hpp"

extern int yylex(YYSTYPE *value,YYLTYPE *location);


void yyerror(const char *str);

%}

/*
%union
{
	char *str;
}
*/


%locations
%pure-parser

%token COMMENT_STRING;
%token GRAPH_BEGIN_TAG;
%token GRAPH_END_TAG;
%token HELLO;
%token WHITE_SPACE;
%token POSITIVE_FLOAT_POINT_VALUE;
%token VERSION_KEY_WORD;
%token MAIN_SUBGRAPH_KEY_WORD;
%token STRING_VALUE;
%token CODE_CLAUSE;

%token HEADER_KEY_WORD;
%token HEADER_BEGIN_TAG;
%token HEADER_END_TAG;

%token ROOT_KEY_WORD;
%token ROOT_BEGIN_TAG;
%token ROOT_END_TAG;

%token TAIL_KEY_WORD;
%token TAIL_BEGIN_TAG;
%token TAIL_END_TAG;

%token NAME_KEY_WORD;
%token SUBGRAPH_BEGIN_TAG;
%token SUBGRAPH_END_TAG;

%token CONDITION_KEY_WORD;

%token VERTEX_BEGIN_TAG;
%token VERTEX_END_TAG;

%token INTERNAL_EDGE_BEGIN_TAG;
%token INTERNAL_EDGE_END_TAG;

%token EXTERNAL_EDGE_BEGIN_TAG;
%token EXTERNAL_EDGE_END_TAG;



%token TEMPLATE_NAME_KEY_WORD;

%token CODE_BEGIN_TAG;
%token CODE_END_TAG;

%token BLOCK_BEGIN_TAG;
%token BLOCK_END_TAG;
%token FILE_KEY_WORD;

%token EXCHANGE_BEGIN_TAG;
%token EXCHANGE_END_TAG;

%%
graph:  comments  GRAPH_BEGIN_TAG  comments graph_declarations comments main_subgraph comments entry_graph comments GRAPH_END_TAG comments;
     ;

comments:
			| comments COMMENT_STRING
			| comments WHITE_SPACE
        ;

graph_declarations: version_clause 
                  |  graph_declarations header_clause 
                  |  graph_declarations root_clause   
                  |  graph_declarations tail_clause   
                  ;

header_clause:   comments HEADER_BEGIN_TAG comments HEADER_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments HEADER_END_TAG
               | comments HEADER_BEGIN_TAG comments CODE_CLAUSE comments HEADER_END_TAG { printf("Code for header: \"%s\"\n",$4); }
             ;

root_clause:     comments ROOT_BEGIN_TAG comments ROOT_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments ROOT_END_TAG 
               | comments ROOT_BEGIN_TAG comments CODE_CLAUSE comments ROOT_END_TAG { printf("Code for root: \"%s\"\n",$4); }
             ;

tail_clause:     comments TAIL_BEGIN_TAG comments TAIL_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments TAIL_END_TAG
               | comments TAIL_BEGIN_TAG comments CODE_CLAUSE comments TAIL_END_TAG { printf("Code for tail: \"%s\"\n",$4); }
             ;



entry_graph: 
			| entry_graph  comments  subgraph            
           ;

version_clause: VERSION_KEY_WORD  comments '=' comments POSITIVE_FLOAT_POINT_VALUE /* {printf("OK\n\n\n\n");}*/  WHITE_SPACE { printf("%s\n",$5); double val; val=strtod($5,NULL); printf("version is %f\n",val); }
              ;

main_subgraph:  /* If Empty then the first subgraph in graph file will be choisen as main */
               | MAIN_SUBGRAPH_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE { printf("main subgraph is '%s'\n",$5); }
             ; 

subgraph: SUBGRAPH_BEGIN_TAG comments name_clause comments condition_clause comments subgraph_entry comments SUBGRAPH_END_TAG
        ;

name_clause: NAME_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
           ;

condition_clause: CONDITION_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE
                ;

subgraph_entry:
                | subgraph_entry comments vertex  
		| subgraph_entry comments internal_edge 
		| subgraph_entry comments external_edge
              ;

vertex: VERTEX_BEGIN_TAG comments name_clause comments vertex_entry comments VERTEX_END_TAG 
      ;

vertex_entry:   vertex_template_name_clause 
              | vertex_body_clause
            ; 

vertex_template_name_clause: TEMPLATE_NAME_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
                           ;

vertex_body_clause: 
                    | code_volume_clause comments vertex_body_clause
                    | exchange_clause   comments vertex_body_clause
                  ;


code_volume_clause: CODE_BEGIN_TAG comments code_volume_weight_clause comments io_volume_weight_clause comments code_block_clause comments CODE_END_TAG
                  ;

code_block_clause: BLOCK_BEGIN_TAG comments CODE_CLAUSE comments BLOCK_END_TAG
                 | BLOCK_BEGIN_TAG comments FILE_KEY_WORD comments '=' comments STRING_VALUE comments BLOCK_END_TAG
                 ;

io_volume_weight_clause:
                       ;

code_volume_weight_clause:
                         ;

exchange_clause: EXCHANGE_BEGIN_TAG comments EXCHANGE_END_TAG;

internal_edge: INTERNAL_EDGE_BEGIN_TAG comments INTERNAL_EDGE_END_TAG
             ; 

external_edge: EXTERNAL_EDGE_BEGIN_TAG comments EXTERNAL_EDGE_END_TAG
             ;



%%


void yyerror(const char *err_str)
{
	printf("err: %s\n",err_str);
}

