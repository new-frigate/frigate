%{

#include <stdio.h>
#include <string>
#include "core/graph.h"
#include "core/frigate_types.h"

using namespace frigate;

#include "graph_file_format.tab.hpp"

#define YYSTYPE char*
#define YYPARSE_PARAM param

extern int yylex(YYSTYPE *value,YYLTYPE *location);

/*
 * It seems for me that it will work only 
 * in bison parser.  
 */
#define yyerror(str) my_yyerror(&yylloc,(str))

#define GREAT_ERROR exit(1)

void my_yyerror(struct YYLTYPE *locp,const char *str);

Graph* main_grph;
Line_dynamic_array<Subgraph> 		SGs;
Line_dynamic_array<ExternalEdge> 	EEs;
Line_dynamic_array<EdgeTemplate> 	ETs;
Line_dynamic_array<VertexTemplate> 	VTs;
Line_dynamic_array<Vertex> 		 	Vs;
Line_dynamic_array<VerticeBlock> 	VBs;
Line_dynamic_array<ControlEdge> 	CEs;
Line_dynamic_array<InternalEdge> 	IEs;
Line_dynamic_array<Fragment>		Fs;
 
%}

/*
%union
{
	char 	 *str;	
	Graph	 *grph;
	Subgraph *subgrph;
}
*/

%error-verbose
%locations
%pure-parser

%token COMMENT_STRING;
%token GRAPH_BEGIN_TAG;
%token GRAPH_END_TAG;
%token WHITE_SPACE;
%token POSITIVE_FLOAT_POINT_VALUE;
%token VERSION_KEY_WORD;
%token MAIN_SUBGRAPH_KEY_WORD;
%token STRING_VALUE;
%token CODE_CLAUSE;

%token HEADER_KEY_WORD;
%token HEADER_BEGIN_TAG;
%token HEADER_END_TAG;

%token ROOT_KEY_WORD;
%token ROOT_BEGIN_TAG;
%token ROOT_END_TAG;

%token TAIL_KEY_WORD;
%token TAIL_BEGIN_TAG;
%token TAIL_END_TAG;

%token NAME_KEY_WORD;
%token SUBGRAPH_BEGIN_TAG;
%token SUBGRAPH_END_TAG;

%token CONDITION_KEY_WORD;

%token VERTEX_BEGIN_TAG;
%token VERTEX_END_TAG;

%token TEMPLATE_NAME_KEY_WORD;

%token CODE_BEGIN_TAG;
%token CODE_END_TAG;

%token BLOCK_BEGIN_TAG;
%token BLOCK_END_TAG;
%token FILE_KEY_WORD;

%token IO_VOLUME_KEY_WORD;
%token CODE_VOLUME_KEY_WORD;

%token EXCHANGE_BEGIN_TAG;
%token EXCHANGE_END_TAG;

%token SEND_BEGIN_TAG;
%token SEND_END_TAG;
%token SEND_KEY_WORD;

%token RECV_BEGIN_TAG;
%token RECV_END_TAG;
%token RECV_KEY_WORD;

%token FRAGMENT_BEGIN_TAG;
%token FRAGMENT_END_TAG;

%token VARIABLE_KEY_WORD;
%token TYPE_KEY_WORD;

%token LEFT_KEY_WORD;
%token RIGHT_KEY_WORD;

%token INTERNAL_EDGE_BEGIN_TAG;
%token INTERNAL_EDGE_END_TAG;

%token EXTERNAL_EDGE_BEGIN_TAG;
%token EXTERNAL_EDGE_END_TAG;

%token CONTROL_EDGE_BEGIN_TAG;
%token CONTROL_EDGE_END_TAG;

%token EDGE_TEMPLATE_BEGIN_TAG;
%token EDGE_TEMPLATE_END_TAG;

%token VERTEX_TEMPLATE_BEGIN_TAG;
%token VERTEX_TEMPLATE_END_TAG;

%%
graph: 	comments  GRAPH_BEGIN_TAG
	{		
		main_grph = (Graph*) param;
	}  
	comments graph_declarations comments main_subgraph graph_entry comments GRAPH_END_TAG comments
	{
		main_grph->setEntries(SGs, EEs, VTs, ETs);
		//SGs.erase();
		//EEs.erase(); /// TODO: debug
		//ETs.erase();
		//VTs.erase();
	}
     	;

comments:
		| comments COMMENT_STRING
		| comments WHITE_SPACE
        ;

graph_declarations: version_clause comments header_clause comments root_clause comments tail_clause 
        ;

header_clause:
	
               | HEADER_BEGIN_TAG comments HEADER_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments HEADER_END_TAG
	{
		CodeBlock block;
		block.setFileName($7);
		main_grph->setHeader(block);		
	} 
               | HEADER_BEGIN_TAG comments CODE_CLAUSE comments HEADER_END_TAG
	{
		CodeBlock block;
		block.setCode($3);
		main_grph->setHeader(block);
	}
        ;

root_clause:   
               | ROOT_BEGIN_TAG comments ROOT_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments ROOT_END_TAG 
	{
		CodeBlock block;
		block.setFileName($7);
		main_grph->setRoot(block);	
	} 
               | ROOT_BEGIN_TAG comments CODE_CLAUSE comments ROOT_END_TAG
	{
		CodeBlock block;
		block.setCode($3);
		main_grph->setRoot(block);
	}
        ;

tail_clause:    
               | TAIL_BEGIN_TAG comments TAIL_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE comments TAIL_END_TAG
	{
		CodeBlock block;
		block.setFileName($7);
		main_grph->setTail(block);		
	} 
               | TAIL_BEGIN_TAG comments CODE_CLAUSE comments TAIL_END_TAG
	{
		CodeBlock block;
		block.setCode($3);
		main_grph->setTail(block);
	}
        ;

graph_entry: 
	| graph_entry  comments  subgraph
        | graph_entry  comments  external_edge
        | graph_entry  comments  edge_template
        | graph_entry  comments  vertex_template
        ;

version_clause: VERSION_KEY_WORD  comments '=' comments POSITIVE_FLOAT_POINT_VALUE WHITE_SPACE 
	{
		double val; 
		val=strtod($5,NULL); 
		main_grph->setVersion(val);
	}
        ;

main_subgraph:  /* If Empty then the first subgraph in graph file will be choisen as main */
        | MAIN_SUBGRAPH_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
	{
		main_grph->setMainSubgraph($5);
	}
             	; 

subgraph: 
	SUBGRAPH_BEGIN_TAG 
	{
		Subgraph* subgraph = new Subgraph();
		SGs.add_element(subgraph);
		delete subgraph;
	}
	comments name_clause comments condition_clause comments subgraph_entry comments SUBGRAPH_END_TAG
	{
		Subgraph* subgraph = SGs.look_position(SGs.num_elements()-1);
		subgraph->setName($4);
		CodeBlock cond;
		cond.setCode($6);
		subgraph->setCondition(cond);
		subgraph->setEntries(Vs, IEs, CEs);
		Vs.erase();
		IEs.erase();
		CEs.erase();
	}
        ;

name_clause: NAME_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
	{
		$$ = $5;
	}
        ;

condition_clause: CONDITION_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE
	{
		$$ = $5;
	}
        ;

subgraph_entry:
        | subgraph_entry comments vertex
        | subgraph_entry comments internal_edge	 
        | subgraph_entry comments control_edge
        ;

vertex: VERTEX_BEGIN_TAG 
	{
		Vertex* vertex = new Vertex();
		Vs.add_element(vertex);
		delete vertex;
	}
	comments name_clause comments vertex_entry VERTEX_END_TAG 
	{
		Vertex* vertex = Vs.look_position(Vs.num_elements()-1);
		vertex->setName($4);
	}
      	;

vertex_entry:  	
	template_name_clause comments
	{
		Vertex* vertex = Vs.look_position(Vs.num_elements()-1);
		vertex->setTemplateName($1);
	} 
        | vertex_body_clause
	{
		Vertex* vertex = Vs.look_position(Vs.num_elements()-1);
		vertex->setVerticeBlocks(VBs);
		VBs.erase();
	}
            ; 

template_name_clause: TEMPLATE_NAME_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
	{
		$$ = $5;
	}
	;

vertex_body_clause:	
	  code_volume_clause comments
        | exchange_clause    comments
	| code_volume_clause comments vertex_body_clause
        | exchange_clause    comments vertex_body_clause
        ;

code_volume_clause: 
	CODE_BEGIN_TAG 
	{
		VerticeBlock* code_block = new CodeBlock();
		VBs.add_element(code_block);
		delete code_block;
	}
	comments code_declarations code_block_clause comments CODE_END_TAG
	;

code_declarations: 
        | code_volume_weight_clause
        | io_volume_weight_clause
	| code_volume_weight_clause io_volume_weight_clause
	| io_volume_weight_clause code_volume_weight_clause
        ;

code_block_clause: 
  	  CODE_CLAUSE WHITE_SPACE
	{
		CodeBlock* code_block = dynamic_cast<CodeBlock*> (VBs.look_position(Vs.num_elements()-1));
		code_block->setCode($1);
	}
        | FILE_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
	{
		CodeBlock* code_block = dynamic_cast<CodeBlock*> (VBs.look_position(Vs.num_elements()-1));
		code_block->setFileName($5);
	}
        ;

io_volume_weight_clause: 
	IO_VOLUME_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE
	{
		CodeBlock* code_block = dynamic_cast<CodeBlock*> (VBs.look_position(Vs.num_elements()-1));
		code_block->setIOVolume($5);
	}
        ;

code_volume_weight_clause: 
	CODE_VOLUME_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE 
	{
		CodeBlock* code_block = dynamic_cast<CodeBlock*> (VBs.look_position(Vs.num_elements()-1));
		code_block->setCodeVolume($5);
	}
        ;

exchange_clause: 
	EXCHANGE_BEGIN_TAG 
	{
		VerticeBlock* exchange_block = new ExchangeBlock();
		VBs.add_element(exchange_block);
		delete exchange_block;
	}
	comments name_clause exchange_entry comments EXCHANGE_END_TAG
        ;

exchange_entry:
        | exchange_entry comments send_clause
        | exchange_entry comments recv_clause
        ;

send_clause: 
	SEND_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
	{
		ExchangeBlock* exchange_block = dynamic_cast<ExchangeBlock*> (VBs.look_position(Vs.num_elements()-1));
		exchange_block->addSend($5);
	}
        ;


recv_clause: 
	RECV_KEY_WORD comments '=' comments STRING_VALUE WHITE_SPACE
	{
		ExchangeBlock* exchange_block = dynamic_cast<ExchangeBlock*> (VBs.look_position(Vs.num_elements()-1));
		exchange_block->addRecv($5);
	}
        ;

vertex_template: 
	VERTEX_TEMPLATE_BEGIN_TAG
	{
		VertexTemplate* vertex_template = new VertexTemplate();
		VTs.add_element(vertex_template);
		delete vertex_template;
	}
	comments name_clause comments vertex_body_clause VERTEX_TEMPLATE_END_TAG
	{
		VertexTemplate* vertex_template = VTs.look_position(VTs.num_elements()-1);
		vertex_template->setName($4);
//		vertex_template->setVerticeBlocks(VBs);
		VBs.erase();
	}
        ;


edge_template: 
	EDGE_TEMPLATE_BEGIN_TAG
	{
		EdgeTemplate* edge_template = new EdgeTemplate();
		ETs.add_element(edge_template);
		delete edge_template;
	}
        comments name_clause 
        comments SEND_BEGIN_TAG 
        comments edge_variables_fragments
        comments SEND_END_TAG
	{
		EdgeTemplate* edge_template = ETs.look_position(ETs.num_elements()-1);
		edge_template->setSendFragments(Fs);
		Fs.erase();
	}
        comments RECV_BEGIN_TAG
        comments edge_variables_fragments
        comments RECV_END_TAG comments 
	{
		EdgeTemplate* edge_template = ETs.look_position(ETs.num_elements()-1);
		edge_template->setRecvFragments(Fs);
		Fs.erase();
		edge_template->setName($3);
	}
        EDGE_TEMPLATE_END_TAG
        ;

edge_variables_fragments: 
	edge_variables_fragment
        | edge_variables_fragments comments edge_variables_fragment
        ;

edge_variables_fragment:
	FRAGMENT_BEGIN_TAG
		comments
                variable_name_clause
                comments
                variable_type_clause
	        comments
                left_fragment_border_clause
                comments
                right_fragment_border_clause
                comments
        FRAGMENT_END_TAG
	{
		Fragment* fragment = new Fragment($3, $5, $7, $9);
		Fs.add_element(fragment);
		delete fragment;
	}
	;


variable_name_clause: 
	VARIABLE_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE
	{
		$$ = $5;
	}
	;

variable_type_clause: 
	TYPE_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE
	{
		$$ = $5;
	}
	;

left_fragment_border_clause:  
	LEFT_KEY_WORD  comments '=' comments CODE_CLAUSE WHITE_SPACE
	{
		$$ = $5;
	}
	;

right_fragment_border_clause: 
	RIGHT_KEY_WORD comments '=' comments CODE_CLAUSE WHITE_SPACE
	{
		$$ = $5;
	}
	;

internal_edge: 
        INTERNAL_EDGE_BEGIN_TAG 
        comments name_clause 
        comments template_name_clause
	{
		InternalEdge* int_edge = new InternalEdge();
		int_edge->setName($3);
		int_edge->setTemplateName($5);
		IEs.add_element(int_edge);
		delete int_edge;
	}
        comments internal_edge_send_coords
        comments internal_edge_recv_coords
        comments 
        INTERNAL_EDGE_END_TAG
        ;

external_edge: 
        EXTERNAL_EDGE_BEGIN_TAG
        comments name_clause 
        comments template_name_clause
	{
		ExternalEdge* extern_edge = new ExternalEdge();
		extern_edge->setName($3);
		extern_edge->setTemplateName($5);
		EEs.add_element(extern_edge);
		delete extern_edge;
	}
        comments external_edge_send_coords
        comments external_edge_recv_coords
        comments
        EXTERNAL_EDGE_END_TAG
        ;

control_edge:
        CONTROL_EDGE_BEGIN_TAG
        comments name_clause
        comments template_name_clause
	{
		ControlEdge* ctrl_edge = new ControlEdge();
		ctrl_edge->setName($3);
		ctrl_edge->setTemplateName($5);
		CEs.add_element(ctrl_edge);
		delete ctrl_edge;
	}
        comments control_edge_send_coords
        comments
        CONTROL_EDGE_END_TAG
        ;


internal_edge_send_coords: 
	SEND_KEY_WORD 
        comments '=' 
        comments '('
        comments STRING_VALUE  /* Vertex  name */
        comments ',' 
        comments STRING_VALUE /* Exchange region name */
        comments ')'
	{
		InternalEdge* int_edge = IEs.look_position(IEs.num_elements()-1);
		int_edge->setSendCoords($7, $11);
	} 
        WHITE_SPACE
	;

internal_edge_recv_coords: 
        RECV_KEY_WORD 
        comments '=' 
        comments '('
        comments STRING_VALUE  /* Vertex  name */
        comments ',' 
        comments STRING_VALUE /* Exchange region name */
        comments ')' 
	{
		InternalEdge* int_edge = IEs.look_position(IEs.num_elements()-1);
		int_edge->setRecvCoords($7, $11);
	} 
        WHITE_SPACE
        ;

external_edge_send_coords: 
        SEND_KEY_WORD 
        comments '=' 
        comments '('
        comments STRING_VALUE  /* Subgraph  name */
        comments ',' 
        comments STRING_VALUE  /* Vertex  name */
        comments ',' 
        comments STRING_VALUE /* Exchange region name */
        comments ')' 
	{
		ExternalEdge* extern_edge = EEs.look_position(EEs.num_elements()-1);
		extern_edge->setSendCoords($7, $11, $15);
	} 
        WHITE_SPACE
        ;

external_edge_recv_coords: 
        RECV_KEY_WORD 
        comments '=' 
        comments '('
        comments STRING_VALUE  /* Subgraph  name */
        comments ',' 
        comments STRING_VALUE  /* Vertex  name */
        comments ',' 
        comments STRING_VALUE /* Exchange region name */
        comments ')' 
	{
		ExternalEdge* extern_edge = EEs.look_position(EEs.num_elements()-1);
		extern_edge->setRecvCoords($7, $11, $15);
	} 
        WHITE_SPACE
        ;

control_edge_send_coords:
	SEND_KEY_WORD 
        comments '=' 
        comments '('
        comments STRING_VALUE  /* Vertex  name */
        comments ',' 
        comments STRING_VALUE /* Exchange region name */
        comments ')'
	{
		ControlEdge* ctrl_edge = CEs.look_position(CEs.num_elements()-1);
		ctrl_edge->setSendCoords($7, $11);
	} 
        WHITE_SPACE
	;


%%


void my_yyerror(struct YYLTYPE *locp,const char *err_str)
{
	printf
	(
		"\n\nError at position: %d.%d - %d.%d\n\t%s\n\n",
		locp->first_line,
		locp->first_column,
	    locp->last_line,
		locp->last_column,
		err_str
	);
}

