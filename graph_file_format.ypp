%{

#include <stdio.h>
#include <string>

#include "core/graph.h"
#include "core/frigate_types.h"

using namespace frigate;

#include "graph_file_format.tab.hpp"

#define YYSTYPE char*

/*
#define YYPARSE_PARAM param
*/

extern int yylex(YYSTYPE *value,YYLTYPE *location);

/*
 * It seems for me that it will work only 
 * in bison parser.  
 */

/*
#define yyerror(str) my_yyerror(&yylloc,NULL,(str))
*/
#define yyerror my_yyerror

#define GREAT_ERROR exit(1)

void my_yyerror(struct YYLTYPE *locp, frigate::Graph *graph, const char *str);


Line_dynamic_array<Subgraph>         subgraphs;
Line_dynamic_array<ExternalEdge>     external_edges;
Line_dynamic_array<EdgeTemplate>     edge_templates;
Line_dynamic_array<VertexTemplate>   vertex_templates;
Line_dynamic_array<Vertex>           vertices;
Line_dynamic_array<VerticeBlock>     vertex_blocks;
Line_dynamic_array<ControlEdge>      control_edges;
Line_dynamic_array<InternalEdge>     internal_edges;
Line_dynamic_array<Fragment>         fragments;
 
%}

/*
%union
{
    char      *str;    
    Graph     *grph;
    Subgraph *subgrph;
}
*/

%parse-param {Graph *graph}

%error-verbose
%locations
%pure-parser

%token COMMENT_STRING;
%token GRAPH_BEGIN_TAG;
%token GRAPH_END_TAG;
%token WHITE_SPACE;
%token POSITIVE_FLOAT_POINT_VALUE;
%token VERSION_KEY_WORD;
%token MAIN_SUBGRAPH_KEY_WORD;
%token STRING_VALUE;
%token CODE_CLAUSE;

%token HEADER_KEY_WORD;
%token HEADER_BEGIN_TAG;
%token HEADER_END_TAG;

%token ROOT_KEY_WORD;
%token ROOT_BEGIN_TAG;
%token ROOT_END_TAG;

%token TAIL_KEY_WORD;
%token TAIL_BEGIN_TAG;
%token TAIL_END_TAG;

%token NAME_KEY_WORD;
%token SUBGRAPH_BEGIN_TAG;
%token SUBGRAPH_END_TAG;

%token CONDITION_KEY_WORD;

%token VERTEX_BEGIN_TAG;
%token VERTEX_END_TAG;

%token TEMPLATE_NAME_KEY_WORD;

%token CODE_BEGIN_TAG;
%token CODE_END_TAG;

%token BLOCK_BEGIN_TAG;
%token BLOCK_END_TAG;
%token FILE_KEY_WORD;

%token IO_VOLUME_KEY_WORD;
%token CODE_VOLUME_KEY_WORD;

%token EXCHANGE_BEGIN_TAG;
%token EXCHANGE_END_TAG;

%token SEND_BEGIN_TAG;
%token SEND_END_TAG;
%token SEND_KEY_WORD;

%token RECV_BEGIN_TAG;
%token RECV_END_TAG;
%token RECV_KEY_WORD;

%token FRAGMENT_BEGIN_TAG;
%token FRAGMENT_END_TAG;

%token VARIABLE_KEY_WORD;
%token TYPE_KEY_WORD;

%token LEFT_KEY_WORD;
%token RIGHT_KEY_WORD;

%token INTERNAL_EDGE_BEGIN_TAG;
%token INTERNAL_EDGE_END_TAG;

%token EXTERNAL_EDGE_BEGIN_TAG;
%token EXTERNAL_EDGE_END_TAG;

%token CONTROL_EDGE_BEGIN_TAG;
%token CONTROL_EDGE_END_TAG;

%token EDGE_TEMPLATE_BEGIN_TAG;
%token EDGE_TEMPLATE_END_TAG;

%token VERTEX_TEMPLATE_BEGIN_TAG;
%token VERTEX_TEMPLATE_END_TAG;

%%

graph:
    comments  
    GRAPH_BEGIN_TAG 
        comments graph_declarations 
        comments main_subgraph graph_entry
        comments 
    GRAPH_END_TAG
    comments
        {
            graph->setEntries(subgraphs, external_edges, vertex_templates, edge_templates);
            //subgraphs.erase();
            //external_edges.erase(); /// TODO: debug
            //edge_templates.erase();
            //vertex_templates.erase();
        }
    ;

comments:
    | comments COMMENT_STRING
    | comments WHITE_SPACE
    ;

graph_declarations:
    version_clause comments header_clause comments root_clause comments tail_clause
    ;

header_clause:
    | HEADER_BEGIN_TAG comments HEADER_KEY_WORD comments '=' comments STRING_VALUE[file_name] WHITE_SPACE comments HEADER_END_TAG
        {
            CodeBlock block;
            block.setFileName($file_name);
            graph->setHeader(block);
        }
    | HEADER_BEGIN_TAG comments CODE_CLAUSE[code] comments HEADER_END_TAG
        {
            CodeBlock block;
            block.setCode($code);
            graph->setHeader(block);
        }
    ;

root_clause:
    | ROOT_BEGIN_TAG comments ROOT_KEY_WORD comments '=' comments STRING_VALUE[file_name] WHITE_SPACE comments ROOT_END_TAG
        {
            CodeBlock block;
            block.setFileName($file_name);
            graph->setRoot(block);
        }
    | ROOT_BEGIN_TAG comments CODE_CLAUSE[code] comments ROOT_END_TAG
        {
            CodeBlock block;
            block.setCode($code);
            graph->setRoot(block);
        }
    ;

tail_clause:
    | TAIL_BEGIN_TAG comments TAIL_KEY_WORD comments '=' comments STRING_VALUE[file_name] WHITE_SPACE comments TAIL_END_TAG
        {
            CodeBlock block;
            block.setFileName($file_name);
            graph->setTail(block);
        }
    | TAIL_BEGIN_TAG comments CODE_CLAUSE[code] comments TAIL_END_TAG
        {
            CodeBlock block;
            block.setCode($code);
            graph->setTail(block);
        }
    ;

graph_entry:
    | graph_entry  comments  subgraph
    | graph_entry  comments  external_edge
    | graph_entry  comments  edge_template
    | graph_entry  comments  vertex_template
    ;

version_clause:
    VERSION_KEY_WORD  comments '=' comments POSITIVE_FLOAT_POINT_VALUE[version] WHITE_SPACE
        {
            double val;
            val=strtod($version,NULL);
            graph->setVersion(val);
        }
    ;

main_subgraph:  /* If Empty then the first subgraph in graph file will be choisen as main */
    | MAIN_SUBGRAPH_KEY_WORD comments '=' comments STRING_VALUE[subgraph_name] WHITE_SPACE
        {
            graph->setMainSubgraph($subgraph_name);
        }
    ;

subgraph:
    SUBGRAPH_BEGIN_TAG
        {
            Subgraph* subgraph = new Subgraph();
            subgraphs.add_element(subgraph);
            delete subgraph;
        }
        comments name_clause[name]
        comments condition_clause[condition]
        comments subgraph_entry 
        comments
    SUBGRAPH_END_TAG
        {
            Subgraph* subgraph = subgraphs.look_position(subgraphs.num_elements()-1);
            subgraph->setName($name);
        
            CodeBlock cond;
            cond.setCode($condition);
            subgraph->setCondition(cond);
            subgraph->setEntries(vertices, internal_edges, control_edges);

            vertices.erase();
            internal_edges.erase();
            control_edges.erase();
        }
    ;

name_clause:
    NAME_KEY_WORD comments '=' comments STRING_VALUE[string] WHITE_SPACE
        {
            $$ = $string;
        }
    ;

condition_clause:
    CONDITION_KEY_WORD comments '=' comments CODE_CLAUSE[code] WHITE_SPACE
        {
            $$ = $code;
        }
    ;

subgraph_entry:
    | subgraph_entry comments vertex
    | subgraph_entry comments internal_edge
    | subgraph_entry comments control_edge
    ;

vertex:
    VERTEX_BEGIN_TAG
        {
            Vertex* vertex = new Vertex();
            vertices.add_element(vertex);
            delete vertex;
        }
    comments name_clause[name] comments vertex_entry VERTEX_END_TAG
        {
            Vertex* vertex = vertices.look_position(vertices.num_elements()-1);
            vertex->setName($name);
        }
    ;

vertex_entry:
      template_name_clause[name] comments
        {
            Vertex* vertex = vertices.look_position(vertices.num_elements()-1);
            vertex->setTemplateName($name);
        }
    | vertex_body_clause
        {
            Vertex* vertex = vertices.look_position(vertices.num_elements()-1);
            vertex->setVerticeBlocks(vertex_blocks);
            vertex_blocks.erase();
        }
    ;

template_name_clause:
    TEMPLATE_NAME_KEY_WORD comments '=' comments STRING_VALUE[name] WHITE_SPACE
        {
            $$ = $name;
        }
    ;

vertex_body_clause:
      code_volume_clause comments
    | exchange_clause    comments
    | code_volume_clause comments vertex_body_clause
    | exchange_clause    comments vertex_body_clause
    ;

code_volume_clause:
    CODE_BEGIN_TAG
        {
            VerticeBlock* code_block = new CodeBlock();
            vertex_blocks.add_element(code_block);
            delete code_block;
        }
    comments code_declarations code_block_clause comments CODE_END_TAG
    ;

code_declarations:
    | code_volume_weight_clause
    | io_volume_weight_clause
    | code_volume_weight_clause io_volume_weight_clause
    | io_volume_weight_clause   code_volume_weight_clause
    ;

code_block_clause:
      CODE_CLAUSE[code] WHITE_SPACE
        {
            CodeBlock* code_block = dynamic_cast<CodeBlock*> (vertex_blocks.look_position(vertex_blocks.num_elements()-1));
            code_block->setCode($code);
        }
    | FILE_KEY_WORD comments '=' comments STRING_VALUE[file_name] WHITE_SPACE
        {
            CodeBlock* code_block = dynamic_cast<CodeBlock*> (vertex_blocks.look_position(vertex_blocks.num_elements()-1));
            code_block->setFileName($file_name);
        }
    ;

io_volume_weight_clause:
    IO_VOLUME_KEY_WORD comments '=' comments CODE_CLAUSE[code] WHITE_SPACE
        {
            CodeBlock* code_block = dynamic_cast<CodeBlock*> (vertex_blocks.look_position(vertex_blocks.num_elements()-1));
            code_block->setIOVolume($code);
        }
    ;

code_volume_weight_clause:
    CODE_VOLUME_KEY_WORD comments '=' comments CODE_CLAUSE[code] WHITE_SPACE
        {
            CodeBlock* code_block = dynamic_cast<CodeBlock*> (vertex_blocks.look_position(vertex_blocks.num_elements()-1));
            code_block->setCodeVolume($code);
        }
    ;

exchange_clause:
    EXCHANGE_BEGIN_TAG
        {
            VerticeBlock* exchange_block = new ExchangeBlock();
            vertex_blocks.add_element(exchange_block);
            delete exchange_block;
        }
    comments name_clause exchange_entry comments EXCHANGE_END_TAG
    ;

exchange_entry:
    | exchange_entry comments send_clause
    | exchange_entry comments recv_clause
    ;

send_clause:
    SEND_KEY_WORD comments '=' comments STRING_VALUE[name] WHITE_SPACE
        {
            ExchangeBlock* exchange_block = dynamic_cast<ExchangeBlock*> (vertex_blocks.look_position(vertex_blocks.num_elements()-1));
            exchange_block->addSend($name);
        }
    ;


recv_clause:
    RECV_KEY_WORD comments '=' comments STRING_VALUE[name] WHITE_SPACE
        {
            ExchangeBlock* exchange_block = dynamic_cast<ExchangeBlock*> (vertex_blocks.look_position(vertex_blocks.num_elements()-1));
            exchange_block->addRecv($name);
        }
    ;

vertex_template:
    VERTEX_TEMPLATE_BEGIN_TAG
            {
                VertexTemplate* vertex_template = new VertexTemplate();
                vertex_templates.add_element(vertex_template);
                delete vertex_template;
            }
        comments name_clause[template_name]
        comments vertex_body_clause
    VERTEX_TEMPLATE_END_TAG
        {
            VertexTemplate* vertex_template = vertex_templates.look_position(vertex_templates.num_elements()-1);
            vertex_template->setName($template_name);
            //vertex_template->setVerticeBlocks(vertex_blocks);
            vertex_blocks.erase();
        }
    ;


edge_template:
    EDGE_TEMPLATE_BEGIN_TAG
        {
            EdgeTemplate* edge_template = new EdgeTemplate();
            edge_templates.add_element(edge_template);
            delete edge_template;
        }
        comments name_clause[template_name]
        comments SEND_BEGIN_TAG
            comments edge_variables_fragments
        comments SEND_END_TAG
            {
                EdgeTemplate* edge_template = edge_templates.look_position(edge_templates.num_elements()-1);
                edge_template->setSendFragments(fragments);
                fragments.erase();
            }
        comments RECV_BEGIN_TAG
            comments edge_variables_fragments
        comments RECV_END_TAG comments
            {
                EdgeTemplate* edge_template = edge_templates.look_position(edge_templates.num_elements()-1);
                edge_template->setRecvFragments(fragments);
                fragments.erase();
                edge_template->setName($template_name);
            }
    EDGE_TEMPLATE_END_TAG
    ;

edge_variables_fragments:
      edge_variables_fragment
    | edge_variables_fragments comments edge_variables_fragment
    ;

edge_variables_fragment:
    FRAGMENT_BEGIN_TAG
        comments variable_name_clause[variable_name]
        comments variable_type_clause[type]
        comments left_fragment_border_clause[left_border]
        comments right_fragment_border_clause[right_border]
        comments
    FRAGMENT_END_TAG
        {
            Fragment* fragment = new Fragment($variable_name, $type, $left_border, $right_border);
            fragments.add_element(fragment);
            delete fragment;
        }
    ;


variable_name_clause:
    VARIABLE_KEY_WORD comments '=' comments CODE_CLAUSE[variable_name] WHITE_SPACE
        {
            $$ = $variable_name;
        }
    ;

variable_type_clause:
    TYPE_KEY_WORD comments '=' comments CODE_CLAUSE[variable_type] WHITE_SPACE
        {
            $$ = $variable_type;
        }
    ;

left_fragment_border_clause:
    LEFT_KEY_WORD  comments '=' comments CODE_CLAUSE[border] WHITE_SPACE
        {
            $$ = $border;
        }
    ;

right_fragment_border_clause:
    RIGHT_KEY_WORD comments '=' comments CODE_CLAUSE[border] WHITE_SPACE
        {
            $$ = $border;
        }
    ;

internal_edge:
    INTERNAL_EDGE_BEGIN_TAG
        comments name_clause[edge_name]
        comments template_name_clause[template_name]
            {
                InternalEdge* int_edge = new InternalEdge();
                int_edge->setName($edge_name);
                int_edge->setTemplateName($template_name);
                internal_edges.add_element(int_edge);
                delete int_edge;
            }
        comments internal_edge_send_coords
        comments internal_edge_recv_coords
        comments
    INTERNAL_EDGE_END_TAG
    ;

external_edge: 
    EXTERNAL_EDGE_BEGIN_TAG
        comments name_clause[edge_name]
        comments template_name_clause[template_name]
            {
                ExternalEdge* extern_edge = new ExternalEdge();
                extern_edge->setName($edge_name);
                extern_edge->setTemplateName($template_name);
                external_edges.add_element(extern_edge);
                delete extern_edge;
            }
        comments external_edge_send_coords
        comments external_edge_recv_coords
        comments
    EXTERNAL_EDGE_END_TAG
    ;

control_edge:
    CONTROL_EDGE_BEGIN_TAG
        comments name_clause[edge_name]
        comments template_name_clause[template_name]
            {
                ControlEdge* ctrl_edge = new ControlEdge();
                ctrl_edge->setName($edge_name);
                ctrl_edge->setTemplateName($template_name);
                control_edges.add_element(ctrl_edge);
                delete ctrl_edge;
            }
        comments control_edge_send_coords
        comments
    CONTROL_EDGE_END_TAG
    ;


internal_edge_send_coords:
    SEND_KEY_WORD
        comments '='
        comments '('
        comments STRING_VALUE[vertex]  /* Vertex  name */
        comments ','
        comments STRING_VALUE[exchange_region] /* Exchange region name */
        comments ')'
            {
                InternalEdge* int_edge = internal_edges.look_position(internal_edges.num_elements()-1);
                int_edge->setSendCoords($vertex, $exchange_region);
            } 
    WHITE_SPACE
    ;

internal_edge_recv_coords:
    RECV_KEY_WORD
        comments '='
        comments '('
        comments STRING_VALUE[vertex]  /* Vertex  name */
        comments ',' 
        comments STRING_VALUE[exchange_region] /* Exchange region name */
        comments ')' 
            {
                InternalEdge* int_edge = internal_edges.look_position(internal_edges.num_elements()-1);
                int_edge->setRecvCoords($vertex, $exchange_region);
            } 
    WHITE_SPACE
    ;

external_edge_send_coords:
    SEND_KEY_WORD
        comments '=' 
        comments '('
        comments STRING_VALUE[subgraph]  /* Subgraph  name */
        comments ',' 
        comments STRING_VALUE[vertex]  /* Vertex  name */
        comments ',' 
        comments STRING_VALUE[exchange_region] /* Exchange region name */
        comments ')' 
            {
                ExternalEdge* extern_edge = external_edges.look_position(external_edges.num_elements()-1);
                extern_edge->setSendCoords($subgraph, $vertex, $exchange_region);
            }
    WHITE_SPACE
    ;

external_edge_recv_coords:
    RECV_KEY_WORD
        comments '='
        comments '('
        comments STRING_VALUE[subgraph]  /* Subgraph  name */
        comments ','
        comments STRING_VALUE[vertex]  /* Vertex  name */
        comments ','
        comments STRING_VALUE[exchange_region] /* Exchange region name */
        comments ')'
        {
            ExternalEdge* extern_edge = external_edges.look_position(external_edges.num_elements()-1);
            extern_edge->setRecvCoords($subgraph, $vertex, $exchange_region);
        } 
    WHITE_SPACE
    ;

control_edge_send_coords:
    SEND_KEY_WORD
        comments '='
        comments '('
        comments STRING_VALUE[vertex]  /* Vertex  name */
        comments ','
        comments STRING_VALUE[exchange_region] /* Exchange region name */
        comments ')'
            {
                ControlEdge* ctrl_edge = control_edges.look_position(control_edges.num_elements()-1);
                ctrl_edge->setSendCoords($vertex, $exchange_region);
            }
    WHITE_SPACE
    ;


%%


void my_yyerror(struct YYLTYPE *locp, frigate::Graph *param, const char *err_str)
{
    fprintf
    (
        stderr,
        "\n\nError at position: %d.%d - %d.%d\n\t%s\n\n",
        locp->first_line,
        locp->first_column,
        locp->last_line,
        locp->last_column,
        err_str
    );
}

